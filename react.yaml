stages:
- buildDockerfile
- release
- deploy

variables:
  TEST_IMAGE: registry.uid.ir/uid/authentication-api-call-center-panel:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: registry.uid.ir/uid/authentication-api-call-center-panel
  IMAGE_TAG: $CI_COMMIT_TAG



build-dockerfile-demo:
  stage: buildDockerfile
  tags:
    - build
  script:
    - whoami
    - docker login -u pishro -p $REGISTRY_PASS registry.uid.ir
    - docker build -t $TEST_IMAGE .
    - docker push $TEST_IMAGE
  only:
    - develop


deploy-dockerfile-demo:
  before_script:
    - ls
  stage: deploy
  tags:
    - demo
  script:
    - docker rm -f authentication-api-call-center-panel || true
    - docker login -u pishro -p $REGISTRY_PASS registry.uid.ir
    - docker pull $TEST_IMAGE
    - docker-compose -f docker-compose.tst.yml up -d
    - docker ps
    - ls 
  only:
    - develop
------
FROM node:16.15.1-alpine3.16 AS builder
ENV NODE_ENV production
# Add a work directory
WORKDIR /app
# Cache and Install dependencies
COPY package.json .
#COPY yarn.lock .
RUN npm install --legacy-peer-deps
# Copy app files
COPY . .
# Build the app
RUN npm run build

# Bundle static assets with nginx
FROM nginx:1.21.0-alpine as production
ENV NODE_ENV production
# Copy built assets from builder
COPY --from=builder /app/build /usr/share/nginx/html
# Add your nginx.conf
COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf
# Expose port
EXPOSE 80
# Start nginx
CMD ["nginx", "-g", "daemon off;"]
